openapi: 3.0.3
info:
  title: Banking - Customer API
  version: 1.3.0
  description: API for managing customers in a banking system (create, update, delete, and arrangements).

servers:
  - url: https://api.bankingsystem.com/v1

paths:
  /customers:
    post:
      summary: Create a customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "201":
          description: Customer created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
    get:
      summary: Arrange (list customers)
      operationId: listCustomers
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 20
        - name: search
          in: query
          schema:
            type: string
            minLength: 1
            maxLength: 50
            example: "John"
      responses:
        "200":
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Customer"

  /customers/{customerId}:
    get:
      summary: Arrange (get customer details)
      operationId: getCustomer
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        "200":
          description: Customer details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
    put:
      summary: Update a customer
      operationId: updateCustomer
      parameters:
        - $ref: "#/components/parameters/customerId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "200":
          description: Customer updated
    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        "204":
          description: Customer deleted

components:
  parameters:
    customerId:
      name: customerId
      in: path
      required: true
      schema:
        type: string
        pattern: "^[a-zA-Z0-9\\-]+$"
        minLength: 5
        maxLength: 20
      description: Unique identifier of a customer (alphanumeric with dashes)

  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
          example: "cust-1001"
          readOnly: true
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          example: "Doe"
        middleName:
          type: string
          maxLength: 50
          example: "Michael"
        gender:
          type: string
          example: "Male"
        dateOfBirth:
          type: string
          format: date
          example: "1985-06-15"
        email:
          type: string
          format: email
          maxLength: 100
          example: "john.doe@example.com"
        phone:
          type: string
          pattern: "^\\+?[0-9]{7,15}$"
          example: "+1-555-123456"
        addresses:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Address"
        kycStatus:
          type: string
          example: "VERIFIED"
        nationality:
          type: string
          minLength: 2
          maxLength: 50
          example: "American"
        occupation:
          type: string
          maxLength: 100
          example: "Software Engineer"
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2025-09-01T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          example: "2025-09-01T12:30:00Z"
      required:
        - firstName
        - lastName
        - email
        - phone
        - dateOfBirth
        - addresses

    Address:
      type: object
      properties:
        type:
          type: string
          example: "RESIDENTIAL"
        line1:
          type: string
          minLength: 5
          maxLength: 100
          example: "123 Main Street"
        line2:
          type: string
          maxLength: 100
          example: "Apt 4B"
        city:
          type: string
          minLength: 2
          maxLength: 50
          example: "New York"
        state:
          type: string
          minLength: 2
          maxLength: 50
          example: "NY"
        postalCode:
          type: string
          pattern: "^[0-9A-Za-z\\- ]{3,10}$"
          example: "10001"
        country:
          type: string
          minLength: 2
          maxLength: 50
          example: "USA"
        isPrimary:
          type: boolean
          default: false
          example: true
      required:
        - type
        - line1
        - city
        - country
